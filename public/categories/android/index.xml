<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ryan M. Hoffman</title>
    <link>https://ryanmhoffman.github.io/categories/android/index.xml</link>
    <description>Recent content on Ryan M. Hoffman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2016 - 2017 RMH Companies; all rights reserved.</copyright>
    <atom:link href="https://ryanmhoffman.github.io/categories/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Android Terminology Overview</title>
      <link>https://ryanmhoffman.github.io/blog/2017/03/01/android-terminology/</link>
      <pubDate>Wed, 01 Mar 2017 13:47:08 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2017/03/01/android-terminology/</guid>
      <description>

&lt;h1 id=&#34;android-unit-of-measure-terminology&#34;&gt;Android Unit of Measure Terminology&lt;/h1&gt;

&lt;p&gt;Have you ever wondered why there are so many different units of measurement in the Android architecture? There is dp, dip, sp, px, pt, in and mm. Below I will run through what each one is and what their purpose is within the Android framework.&lt;/p&gt;

&lt;h3 id=&#34;px&#34;&gt;PX&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;View
  android:layout_width:&amp;quot;50px&amp;quot;
  android:layout_height:&amp;quot;wrap_content&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Android, px is short for pixels. It corresponds to actual pixels on the screen. In this example the view would be exactly 50 pixels wide. This is useful for getting your layout pixel perfect, but there is a catch when using px. The pixel density on the screen will vary across devices. The higher the pixel density is, the smaller the view will appear, even though it will still be 50px.&lt;/p&gt;

&lt;h3 id=&#34;dp-dip&#34;&gt;DP/DIP&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;View
  android:layout_width:&amp;quot;50dp&amp;quot;
  android:layout_height:&amp;quot;50dip&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DP and DIP are actually the same thing and can be used interchangeably. They stand for Density Independent Pixels. This is one of the most useful measurements for designing across multiple screen densities and having everything lay out properly. Density independent pixels scale views so they lay out proportionally across various pixel densities. On a screen with a pixel density of 160dpi, 1dp is the same as 1px. As the pixel density increases for  higher resolution display, the ratio of dp to px will change. If you use dp/dip as the unit of measure, Android will decide the correct ratio for you so the views stay proportional across screens with various pixel densities. This is probably the most common unit used due to how easy it is to design across devices with minimal issues. It is worth noting that while dp and dip can be used interchangeably, dp is more commonly used because not only is it one less character to type, but it also corresponds with sp as you will see next.&lt;/p&gt;

&lt;h3 id=&#34;sp&#34;&gt;SP&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;TextView
  android:textSize=&amp;quot;18sp&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SP stands for Scale Independent Pixels. SP is very similar to DP/DIP, with one main difference. Scale independent pixels adjust based on pixel density and user preference. This means if the user is visually impaired and specifies Large Text in their settings, sp will scale appropriately on their device. It is mainly used on text, but it can also be used on views containing text to ensure they expand to fit the text properly. If there are no custom settings specified on the user&amp;rsquo;s device, sp will behave exactly the same as dp/dip.&lt;/p&gt;

&lt;h3 id=&#34;pt&#34;&gt;PT&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;View
  android:layout_width:&amp;quot;25pt&amp;quot;
  android:layout_height:&amp;quot;35pt&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PT is short for Point, and it is simply &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;72&lt;/sub&gt; of an inch. This assumes a screen with 72dpi (dots per inch.)&lt;/p&gt;

&lt;h3 id=&#34;mm-and-in&#34;&gt;MM and IN&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;View
  android:layout_width:&amp;quot;1in&amp;quot;
  android:layout_height:&amp;quot;15mm&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MM is the abbreviation for millimeters, and IN is the abbreviation for inches. These units refer to actual sizes and ignore factors like pixel density and screen size. Using a value like &amp;ldquo;1in&amp;rdquo; means the view will take up exactly 1 inch of screen real estate, and the same is true for millimeters.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;When designing layouts on Android, dp and sp are definitely the most commonly used units due to how easily they scale across different screens. It is always recommended that you test your layouts on as many different screen sizes as possible to ensure that everything is laid out as expected. Even with the units that scale across pixel densities there can still be inconsistencies, so never trust that your layout will look exactly like it does in the preview in Android Studio.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Friends Android App</title>
      <link>https://ryanmhoffman.github.io/blog/2016/12/20/friends-android-app/</link>
      <pubDate>Tue, 20 Dec 2016 13:47:08 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2016/12/20/friends-android-app/</guid>
      <description>

&lt;h1 id=&#34;friends-android-app&#34;&gt;Friends Android App&lt;/h1&gt;

&lt;p&gt;Friends is an Android app I am currently developing with a planned release in early January 2017. The app
is a short-list version of the stock contacts app. Friends pulls in only your starred contacts and gives
you easy access to call or text them. It is supposed to be sort of like a speed dial, but for all your
favorites instead of just one, and all in one place.&lt;/p&gt;

&lt;h2 id=&#34;the-idea&#34;&gt;The Idea&lt;/h2&gt;

&lt;p&gt;I originally began building this app as a generic replacement to the stock contacts app on Android. As I
was building it I began wondering what feature I would have that would set it apart. I thought about the
idea of somehow highlighting friends and those you talk to most to make it easiest to contact them.&lt;/p&gt;

&lt;p&gt;That is when I decided to dedicate the app to &lt;strong&gt;&lt;em&gt;only&lt;/em&gt;&lt;/strong&gt; those favorites that you contact the most.
Instead of having the whole muddled mess of contacts, probably over half of them you used exactly one
time and will never use again, Friends puts the people most important to you at your fingertips instantly.&lt;/p&gt;

&lt;h2 id=&#34;the-features&#34;&gt;The Features&lt;/h2&gt;

&lt;p&gt;From the beginning I wanted to keep the app small and simple. I didn&amp;rsquo;t want anything slow and clunky with
a million unnecessary features that just ruin the user experience. I wanted the list of contacts as the
main screen, and when you click on one it will bring up their details and allow you to contact them.&lt;/p&gt;

&lt;p&gt;The main feature is that it collects all your favorite contacts and puts them in a very simple list on
the main screen. It isn&amp;rsquo;t cluttered or messy, and it is very easy to glance through to find the person
you are looking for in a couple seconds.&lt;/p&gt;

&lt;p&gt;Once you find the person you are looking for you can click on them to open up the details screen. This
screen has their name, of course, in a very simple material designed way. It will also have a card
containing the last text message you received from them as a reminder to what you were last talking about.&lt;/p&gt;

&lt;p&gt;The last thing you can do on the details screen is either call or text your friend. There is a Floating
Action Button on the screen, and when you click on it, it will expand showing a couple of options. You
can click the option on the left to call this person, or the option on the left to open your default
messaging app and text them.&lt;/p&gt;

&lt;p&gt;Currently that is all you can do, but there are plans to add new features in the future, as long as it
doesn&amp;rsquo;t complicate the feel. Something I&amp;rsquo;m already planning to implement is a long press to call from
the main contact list screen. Things like that are neat and useful tricks that don&amp;rsquo;t have any effect on
UI or performance but still positively improve the utility.&lt;/p&gt;

&lt;h2 id=&#34;release-schedule&#34;&gt;Release Schedule&lt;/h2&gt;

&lt;p&gt;As I mentioned previously, I plan to have the first version of this released within the first week or
two of January. As with all software, it is never finished, but it is very nearly ready to be released
in the initial version. All of the features for the first version are already implemented and seem to
be working, but I might need to make a few tweaks here or there and I&amp;rsquo;m still heavily testing to make
sure it goes well on release.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll update this post frequently with news on the release schedule and probably continue to update it
after it is released to announce improvements and future features.&lt;/p&gt;

&lt;h2 id=&#34;update&#34;&gt;&lt;em&gt;Update&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Friends has officially been published to the Play Store. Of course it is a bare bones version, but there
will be more updates down the line. I did end up adding the long press to call from the main screen since
that was a very quick edit to the code. I also added a sorting function to put your friends in
alphabetical order. That was relatively simple to implement and makes it much easier to scroll and find
the person you are looking for. If you want to check it out please download it from the Play Store and
leave me a review letting me know what you think!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;https://play.google.com/store/apps/details?id=com.software.rmh.friends&#39;&gt;&lt;img src=&#39;https://ryanmhoffman.github.io/img/google-play-badge.png&#39;/&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Studio Libraries With Gradle</title>
      <link>https://ryanmhoffman.github.io/blog/2016/12/01/android-studio-libraries-with-gradle/</link>
      <pubDate>Thu, 01 Dec 2016 13:47:08 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2016/12/01/android-studio-libraries-with-gradle/</guid>
      <description>

&lt;h1 id=&#34;using-libraries-in-android-studio&#34;&gt;Using Libraries in Android Studio&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://ryanmhoffman.github.io/img/banners/banner_gradle_android.png&#34; style=&#34;width: 100%; height: 100%&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;intro-to-gradle-for-android-studio&#34;&gt;Intro to Gradle for Android Studio&lt;/h2&gt;

&lt;p&gt;Android Studio switched to a gradle based build system a few years ago, and that made it very simple to
incorporate open source libraries  your Android projects. If you aren&amp;rsquo;t familiar with gradle you can
learn more about it &lt;a href=&#34;https://gradle.org/getting-started-android-build/&#34;&gt;here&lt;/a&gt;. The details of gradle
recipes are beyond the scope of this post, but I will show the very basics of including libraries in
your project. Fortunately gradle makes it dummy-proof to add dependencies in your project. Gradle is not
the only way to add a library to your project, and if you are familiar with eclipse then you are most
likely familiar with adding .jar files to your project. This is still possible in Android Studio, but I
will not be covering that in this post, and I don&amp;rsquo;t recommend it. By using gradle, all you need to do is
include 1 line of code in you &lt;code&gt;build.gradle&lt;/code&gt; file and it does the rest. It pulls in the dependency at
build time so it doesn&amp;rsquo;t need to be downloaded and included as a .jar file. Even more appealing than that
is how easy it is to use it with different versions of libraries. With gradle, if you are using
&lt;code&gt;my-awesome-library:v1.0&lt;/code&gt; but then version 2-0 comes out, all you have to do is change that statement
to &lt;code&gt;my-awesome-library:v2.0&lt;/code&gt; and start using the updates immediately. That is much easier than
deleting the .jar and downloading and adding the new version.&lt;/p&gt;

&lt;p&gt;So now that we know the differences let&amp;rsquo;s have a look at adding external libraries with gradle.&lt;/p&gt;

&lt;h2 id=&#34;adding-libraries-with-gradle&#34;&gt;Adding Libraries with Gradle&lt;/h2&gt;

&lt;p&gt;When you create a new project in Android Studio it is already preconfigured to use gradle. If you look
through the project files that are created initially you will find a couple different gradle files. The
first one is probably your high level project file. This is the gradle file to configure project-wide
settings. We will not need to modify this file for what we are going to accomplish in this tutorial. Next
will be the module level gradle files. If you created a simple app with only one module then there will
only be one module level &lt;code&gt;build.gradle&lt;/code&gt;. If you included other modules in your project, for example
Android Wear, Android TV, or Android Auto then there should be more than one version of this file for
each module. Each one should be labeled next to it in parentheses describing what it is for.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;build.gradle (Project: MyProject)
build.gradle (Module: mobile)
build.gradle (Module: wear)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The one you need to edit is the &lt;code&gt;build.gradle (Module: mobile)&lt;/code&gt; to add the open source library to our
project. The library we are going to add in this example is Google&amp;rsquo;s
&lt;a href=&#34;https://developer.android.com/training/material/lists-cards.html#CardView&#34;&gt;CardView&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how easy it is to add a library to your project with gradle and Android Studio. Start by opening
the &lt;code&gt;build.gradle&lt;/code&gt; file for the mobile module. Find the section near the bottom labeled
&lt;code&gt;dependencies&lt;/code&gt; and add this line to the bottom of that section:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;compile &#39;com.android.support:cardview-v7:25.0.1&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dependencies {
  // other module dependencies may be listed here
  ...
  compile &#39;com.android.support:cardview-v7:25.0.1&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you add that line Android Studio will let you know that gradle files have changed and prompt you to
sync your project with gradle. Once you do that you can immediately begin using the library in your code.
If a new version is released just change the version number in your gradle file and sync your project
again and that&amp;rsquo;s it.&lt;/p&gt;

&lt;h2 id=&#34;adding-modules&#34;&gt;Adding Modules&lt;/h2&gt;

&lt;p&gt;I have already mentioned modules above a little bit, but I haven&amp;rsquo;t really explained what they are or what
they are used for. Modules are basically just portions of code that are broken out into groups to make
them easily reusable. You can think of them as mini projects within your main project. As I mentioned
earlier, when you create an app for mobile, wear, auto, and tv, Android Studio automatically sets up each
as its own module. This is so you can define activities and views for each in their own module without it
affecting any of the others. But you can also create your own modules. I like to create a module for all
of the logic and data classes in my apps, that way the code can be shared to each portion of the app.&lt;/p&gt;

&lt;p&gt;For instance, if I have an app that has a phone portion and a wear portion, most likely it will pull data
from a server and both portions will need to use that data. Rather than retrieve that data and use it in
the phone module, then retrieve and use it in the wear module, I build a separate data module to retrieve
the data from the server and both the phone and wear modules can use it as necessary from there. Pretty
much any logic, data loading/storage can be put in modules this way to save writing it all multiple
times.&lt;/p&gt;

&lt;p&gt;Adding a module is quite simple and very similar to adding an external library. In your project there
should be a &lt;code&gt;settings.gradle&lt;/code&gt; file. This file manages what modules are included in your project. It
should look something like this for the most basic project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include &#39;:app&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add your module you have to add this, replacing &amp;ldquo;myshinynewmodule&amp;rdquo; with the name of your module or
library.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include &#39;:app&#39;, &#39;:myshinynewmodule&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this you are almost done. There is one final step before you can use the code in your shiny new
module in your app. As we did with the cardview library earlier, open the &lt;code&gt;build.gradle&lt;/code&gt; file for
your mobile module. In the dependencies section that we modified earlier add this line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;compile project (&#39;:myshinynewmodule&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it. You can now start using the code from your module in your app just as if it were an external
library.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this was clear and you were able to learn something about gradle, dependencies, or using modules
in your Android project. If you have any questions please reach out to me and I&amp;rsquo;d be happy to help. If
you spot any errors, please let me know about them so I can make this as accurate as possible.
(BE GENTLE!!) As always, please follow me on twitter
&lt;a href=&#34;https://www.twitter.com/hoffmanryan1&#34;&gt;@hoffmanryan1&lt;/a&gt; and on medium
&lt;a href=&#34;https://www.medium.com/@rmhcompanies&#34;&gt;@rmhcompaines&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Studio Keyboard Shortcuts</title>
      <link>https://ryanmhoffman.github.io/blog/2016/11/21/android-studio-shortcuts/</link>
      <pubDate>Mon, 21 Nov 2016 13:47:08 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2016/11/21/android-studio-shortcuts/</guid>
      <description>

&lt;h2 id=&#34;android-studio-shortcuts&#34;&gt;Android Studio Shortcuts&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://ryanmhoffman.github.io/img/banners/android-studio.png&#34; style=&#34;width: 100%; height: 100%&#34;/&gt;&lt;/p&gt;

&lt;p&gt;If you have used Android Studio for even a short time I&amp;rsquo;m sure you have found some shortcuts and hot keys
to speed up your coding and keep your hands on the keyboard where they belong! I&amp;rsquo;m going to run through
some of the shortcuts I find most useful. Android Studio is built by Google, but it is based on Jetbrains
Intellij Community Edition Java IDE. This means that all of the Intellij shortcut keys work on Android
Studio, but Google have added a few of their own. Let&amp;rsquo;s jump into some of the best ones.&lt;/p&gt;

&lt;h3 id=&#34;searching-for-a-shortcut&#34;&gt;Searching For A Shortcut&lt;/h3&gt;

&lt;p&gt;Stop me if this has happened to you before. You read an awesome tutorial on shortcuts and hot keys in
Android Studio and found a few that looked really useful, but when you sit down and start coding you
can&amp;rsquo;t remember what they were. Fortunately someone thought of this and made several several search
functions.&lt;/p&gt;

&lt;h4 id=&#34;search-everywhere&#34;&gt;Search everywhere:&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Shift Shift&lt;/strong&gt; (Windows, Linux, Mac)
This searches literally everywhere. It can even search outside of the scope of your project if you want
it to (every file on your computer). Thankfully it groups what it finds into categories, with the most
recent files first.&lt;/p&gt;

&lt;h4 id=&#34;search-for-commands&#34;&gt;Search for commands:&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Command + Shift + A&lt;/strong&gt; (Mac)
&lt;strong&gt;Control + Shift + A&lt;/strong&gt; (Windows, Linux)
This searches for any command. If you know there is a way to jump to the next error in your code but you
can&amp;rsquo;t remember what it is, just use this command and start typing &amp;ldquo;error&amp;rdquo; and it will intelligently find
it. This works for any command. If you only want to memorize one shortcut, this is the one.&lt;/p&gt;

&lt;h3 id=&#34;navigation&#34;&gt;Navigation&lt;/h3&gt;

&lt;p&gt;Here are a few more ways to keep your hands off the mouse and still get around your project quickly.&lt;/p&gt;

&lt;h4 id=&#34;jump-to-class&#34;&gt;Jump to Class&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Command + O&lt;/strong&gt; (Mac)
&lt;strong&gt;Control + N&lt;/strong&gt; (Windows, Linux)&lt;/p&gt;

&lt;h4 id=&#34;jump-to-file&#34;&gt;Jump to File&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Command + Shift + O&lt;/strong&gt; (Mac)
&lt;strong&gt;Control + Shift + N&lt;/strong&gt; (Windows, Linux)&lt;/p&gt;

&lt;h4 id=&#34;jump-to-method&#34;&gt;Jump to Method&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Control + Up/Down&lt;/strong&gt; (Mac)
&lt;strong&gt;Alt + Up/Down&lt;/strong&gt; (Windows, Linux)
Up is the previous method, down is the next method.&lt;/p&gt;

&lt;h3 id=&#34;editing-code&#34;&gt;Editing Code&lt;/h3&gt;

&lt;p&gt;This is the one we try to spend the most time on, and even though searching for the correct command is
easy with the shortcut above, it is still quicker to memorize these shortcuts and add them to our
workflow. These will really help you get &lt;em&gt;past&lt;/em&gt; the editor and focus only on the editing.&lt;/p&gt;

&lt;h4 id=&#34;auto-completion&#34;&gt;Auto-Completion&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Tab&lt;/strong&gt; (Mac, Windows, Linux)
&lt;strong&gt;Enter&lt;/strong&gt; (Mac, Windows, Linux)&lt;/p&gt;

&lt;h4 id=&#34;comments&#34;&gt;Comments&lt;/h4&gt;

&lt;p&gt;Single Line Comment
&lt;strong&gt;Command + /&lt;/strong&gt; (Mac)
&lt;strong&gt;Control + /&lt;/strong&gt; (Windows, Linux)
Multi Line Comment
&lt;strong&gt;Command + Alt + /&lt;/strong&gt; (Mac)
&lt;strong&gt;Control + Shift + /&lt;/strong&gt; (Windows, Linux)&lt;/p&gt;

&lt;h4 id=&#34;show-parameters&#34;&gt;Show Parameters&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Command + p&lt;/strong&gt; (Mac)
&lt;strong&gt;Control + p&lt;/strong&gt; (Windows, Linux)
This one is useful if you can&amp;rsquo;t remember what parameters a method takes.&lt;/p&gt;

&lt;h4 id=&#34;refactoring&#34;&gt;Refactoring&lt;/h4&gt;

&lt;p&gt;Renaming a variable/method/class etc.
&lt;strong&gt;Shift + F6&lt;/strong&gt; (Mac)
&lt;strong&gt;Control + F6&lt;/strong&gt; (Windows, Linux)&lt;/p&gt;

&lt;h4 id=&#34;intelligent-code-generation&#34;&gt;Intelligent Code Generation&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Command + N&lt;/strong&gt; (Mac)
&lt;strong&gt;Alt + Insert&lt;/strong&gt; (Windows, Linux)&lt;/p&gt;

&lt;h4 id=&#34;live-templates&#34;&gt;Live Templates&lt;/h4&gt;

&lt;p&gt;There are dozens of these available by default, and the great thing about Android Studio is that you
have the freedom to create more if you wish. If you don&amp;rsquo;t know what live templates are, they are
boilerplate sections of code that gets automatically inserted for you. All you have to do is tab through
to fill in the variable values.&lt;/p&gt;

&lt;p&gt;A commonly used one is &amp;ldquo;Toast&amp;rdquo;. You type &amp;ldquo;Toast&amp;rdquo; and hit &lt;strong&gt;Tab&lt;/strong&gt; and it automatically gives you this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Toast.makeText(MainActivity.this, &amp;quot;&amp;quot;, Toast.LENGTH_SHORT).show();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you hit &lt;strong&gt;Tab&lt;/strong&gt; a second time it moves the cursor over to the quotation marks so you can type your
message, and if you hit &lt;strong&gt;Tab&lt;/strong&gt; one more time it moves your cursor to the end of the line.&lt;/p&gt;

&lt;p&gt;Another common one is to type &amp;ldquo;fori&amp;rdquo; and hit &lt;strong&gt;Tab&lt;/strong&gt;. That gives you this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for(i = 0; i &amp;lt; ; i++){

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course tabbing through allows you to modify the variable name, value, loop length, and finally it
drops you inside the curly brackets to write the code to be executed.&lt;/p&gt;

&lt;p&gt;As I mentioned there are dozens more and you can create your own. To find all the live templates
included just search everywhere with &lt;strong&gt;Shift Shift&lt;/strong&gt; and type &amp;ldquo;Live Templates&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Thank you for reading this. I hope some of these tricks will help you become a better and faster
developer. If you want the full and overwhelming list of shortcuts for Android Studio you can check out
the list &lt;a href=&#34;https://developer.android.com/studio/intro/keyboard-shortcuts.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, please follow me on twitter &lt;a href=&#34;https://www.twitter.com/hoffmanryan1&#34;&gt;@hoffmanryan1&lt;/a&gt; and on
medium &lt;a href=&#34;https://www.medium.com/@rmhcompanies&#34;&gt;@rmhcompaines&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Constraint Layout</title>
      <link>https://ryanmhoffman.github.io/blog/2016/11/15/constraint-layout/</link>
      <pubDate>Tue, 15 Nov 2016 13:47:08 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2016/11/15/constraint-layout/</guid>
      <description>

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;There are many different views and view groups in the Android infrastructure. Some are more useful than
others, but they all have their place. Recently, Google released a new layout called ConstraintLayout.&lt;/p&gt;

&lt;p&gt;This is still in alpha release stage but it looks very promising. This isn&amp;rsquo;t going to be a tutorial on how
to use it, rather, it&amp;rsquo;s just my thoughts and opinions on the concept and implementation. Keep in mind I
have only been messing around with it for a couple of weeks, so my opinion could change as they update and
improve it.&lt;/p&gt;

&lt;h3 id=&#34;initial-thoughts&#34;&gt;Initial Thoughts&lt;/h3&gt;

&lt;p&gt;When I first heard about ConstraintLayout before I even tried it out I thought it sounded like a rip off
of iOS UI builder in xcode. After learning more about it and using it a little bit I still kind of feel
that way. That&amp;rsquo;s not to say it&amp;rsquo;s a bad thing, but even if it wasn&amp;rsquo;t copied directly from Apple it was at
least &lt;em&gt;heavily&lt;/em&gt; inspired by xcode. My initial reaction to this was to not like it. At all. I can stumble
my way through iOS development, but I&amp;rsquo;m not nearly as comfortable with iOS as I am with Android. And my
limited experience with the UI Builder in xcode is not good. I found it a little bit difficult to use and
setting constraints was hard to come to grips with coming from XML layouts in Android. Then Android was
switching to ConstraintLayout to mimic iOS? Not a big fan of that idea.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t know what ConstraintLayout is, you can get more details about it
&lt;a href=&#34;https://developer.android.com/training/constraint-layout/index.html&#34;&gt;here&lt;/a&gt;. Basically you drag views and
widgets onto the design screen and then set &amp;ldquo;constraints&amp;rdquo; that tell where each view should be positioned
relative to everything else on the screen. The purpose of it is to flatten the hierarchy of the view tree.
Instead of nesting LinearLayout&amp;rsquo;s and RelativeLayout&amp;rsquo;s trying to position everything properly, this allows
you to position everything relative to whatever you need to in order to lay it all out properly. It is
supposed to help improve performance and make it scale across different screen sizes easier. I have not
tested performance or scalability so I don&amp;rsquo;t know if it is actually better in those regards. If you run
any tests please let me know the results, I&amp;rsquo;ll add them here and credit you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ryanmhoffman.github.io/img/banners/layout-editor.png&#34; style=&#34;width: 100%; height: 100%&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;after-using-it-to-design-screens&#34;&gt;After Using it to Design Screens&lt;/h2&gt;

&lt;p&gt;I decided to give it the benefit of the doubt and it appeared to be the future of Android development so I
figured I needed to get on board. Using it was definitely weird at first, but after a while of making
different layouts I started to get used to it a little bit. Sometimes it was a little buggy, but that&amp;rsquo;s to
be expected from an alpha version.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s going to take some getting used to, but it looks promising. There are a few things I liked, and of
course plenty that I didn&amp;rsquo;t.&lt;/p&gt;

&lt;h3 id=&#34;the-good&#34;&gt;The Good&lt;/h3&gt;

&lt;p&gt;Overall the experience is good. Setting constraints is as easy as click and drag, and it is pretty
intelligent on knowing what you are trying to do. Linking views together is pretty simple, and pinning a
view to an edge or margin is also straightforward.&lt;/p&gt;

&lt;p&gt;I also like that as you make changes in the editor you can still switch over to the XML and see what is
actually changing, and if you really want you could make changes directly to the XML.&lt;/p&gt;

&lt;h3 id=&#34;the-not-so-good&#34;&gt;The Not So Good&lt;/h3&gt;

&lt;p&gt;When editing the screens there are 2 screens shown, one is the blueprint screen and one is the design
screen. The blueprint screen is meant for editing and adding constraints, while the design screen is meant
as a actual preview of what is on the screen, content and all. My problem is that you can edit constraints
(or anything really) on the design screen. It causes some bugs and issues with the layout preview, and
it&amp;rsquo;s just overall confusing. I wish they only allowed editing in the blueprint mode and the preview was
exactly that, just a preview. Perhaps in a future release they will make that change.&lt;/p&gt;

&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;It is still going to take some getting used to, but I see this as the future of Android design and
development and I really am excited about what Google is going to add down the road. I&amp;rsquo;m going to
continue to use it and learn more about it and perhaps start actually using it in projects here soon. At
it&amp;rsquo;s current stage I don&amp;rsquo;t think it is production ready, but that could change with a new release. I&amp;rsquo;ll
keep this updated as new versions come out and I learn more about it. If I get more comfortable with it I
may even write a tutorial.&lt;/p&gt;

&lt;p&gt;As always, please follow me on twitter &lt;a href=&#34;https://www.twitter.com/hoffmanryan1&#34;&gt;@hoffmanryan1&lt;/a&gt; and on medium
&lt;a href=&#34;https://www.medium.com/@rmhcompanies&#34;&gt;@rmhcompaines&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CBT Velocity Android App</title>
      <link>https://ryanmhoffman.github.io/blog/2016/11/02/velocity-android-app/</link>
      <pubDate>Wed, 02 Nov 2016 13:47:08 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2016/11/02/velocity-android-app/</guid>
      <description>

&lt;h2 id=&#34;the-idea&#34;&gt;The Idea&lt;/h2&gt;

&lt;p&gt;This app was created for high school students. Specifically, the high school students in my church, Canton
Baptist Temple, who are a part of the youth group which is called - as you might have guessed, Velocity.
The thinking behind this is pretty simple and makes a lot of sense if you have ever spent any time around
high school students. The issue is that no matter how many times you tell them something, they still have
no idea what you said - unless you put it right in front of them on their phone.&lt;/p&gt;

&lt;p&gt;The problem we had was that we would announce class activities, mail out fliers, and have sign up sheets
in the class, yet we would still have parents and students calling a couple days before hand to ask for
all the details we had already made sure were available. We decided the best way to get them this info
was on their phone in an app with notifications and reminders and all the details they need.&lt;/p&gt;

&lt;h2 id=&#34;development-and-vision&#34;&gt;Development and Vision&lt;/h2&gt;

&lt;p&gt;CBT Velocity is a native app designed for the Android platform. It is coded in Java and XML, and I host
all of the content used in the app on my LAMP (Linux Apache MySQL PHP) server. As you can tell from the
screenshots I used material design for the UI/UX and I tried to keep it simple with a card based layout.
The cards are set in a RecyclerView and each card is retrieved over the network from my server. The
navigation drawer contains links to other related social media pages, and to the settings, where you can
configure data/wifi usage and turn notifications on/off.&lt;/p&gt;

&lt;p&gt;There are a couple things not implemented yet that I plan to add eventually. The first is going to be
in-app sign up for activities. I want the students to be able to log in to the app, click on the activity
and sign up there instead of the paper sheets we have in the class. The next one piggy-backs on that, and
it is to have in app payment for the activities. Instead of remembering to bring $20 to church or to the
activity, they should be able to log in and securely pay us right from within the app.&lt;/p&gt;

&lt;p&gt;The whole app is open source, please check it out at &lt;a href=&#34;https://github.com/ernieb4768/CBTVelocity&#34;&gt;github&lt;/a&gt;
and let me know what you think!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ryanmhoffman.github.io/img/banners/cbt-velocity-activities.png&#34; style=&#34;width: 33%; height: 33%; padding: 5px&#34;/&gt; &lt;img src=&#34;https://ryanmhoffman.github.io/img/banners/cbt-velocity-about-us.png&#34; style=&#34;width: 33%; height: 33%; padding: 5px&#34;/&gt; &lt;img src=&#34;https://ryanmhoffman.github.io/img/banners/cbt-velocity-nav-drawer.png&#34; style=&#34;width: 33%; height: 33%; padding: 5px&#34;/&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>