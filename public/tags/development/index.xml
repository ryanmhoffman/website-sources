<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ryan M. Hoffman</title>
    <link>https://ryanmhoffman.github.io/tags/development/index.xml</link>
    <description>Recent content on Ryan M. Hoffman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2016 - 2018 RMH Companies; all rights reserved.</copyright>
    <atom:link href="https://ryanmhoffman.github.io/tags/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>RMH Trucking Sample Site</title>
      <link>https://ryanmhoffman.github.io/blog/2018/06/05/rmh-trucking/</link>
      <pubDate>Tue, 05 Jun 2018 13:47:08 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2018/06/05/rmh-trucking/</guid>
      <description>

&lt;h1 id=&#34;rmh-trucking-small-sample-site&#34;&gt;RMH Trucking Small Sample Site&lt;/h1&gt;

&lt;p&gt;I recently decided to change up my focus a little bit from &amp;ldquo;Android Development&amp;rdquo; or even more general with &amp;ldquo;Mobile Development&amp;rdquo;
and focus on web development. I decided that I was going to try solve a problem I am very familiar with, terrible or non-existing
websites for trucking companies. Even more specifically than that, websites that are outdated and not mobile friendly for
trucking companies that specialize in liquid bulk transportation. I got the idea from
&lt;a href=&#34;https://entrepreneurs.maqtoob.com/how-to-get-jobs-on-freelance-sites-even-if-you-have-zero-experience-6df6a660ff1b&#34;&gt;this article&lt;/a&gt;
that you can check out, but it basically says to be highly specialized instead of highly generalized in order to better compete
as a freelancer. That is when I realized that I am intimately familiar with trucking companies and many have terrible or no websites.&lt;/p&gt;

&lt;p&gt;I created RMH Trucking as a sample of what I can do. It is called RMH Trucking Small because it is the &amp;ldquo;small&amp;rdquo; offering I have.
I will also be creating a RMH Trucking Medium and RMH Trucking Large for those companies looking for more comprehensive sites.
For now you can check out &lt;a href=&#34;https://ryanmhoffman.github.io/RMHTruckingSmall&#34;&gt;RMH Trucking Small here.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-importance&#34;&gt;The Importance&lt;/h3&gt;

&lt;p&gt;This site and the others once created will offer a look and design like they are modern, but they will more importantly scale
well for mobile devices. The most common thing I see is a slightly outdated desktop site that isn&amp;rsquo;t terrible, but on mobile
it becomes completely unusable. My sites will be completely mobile friendly, look great, and will be customizable to match
the brand of any company. Also, they will be optomized to rank highly in search engines so potential new customers and
drivers can find the company and easily get in contact with them.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I will come back and update this with the other sample sites once they are created, so stay tuned for those updates. If you
are looking to have a site built or redesigned for your trucking company (or any other company), feel free to
&lt;a href=&#34;https://ryanmhoffman.github.io/contact/&#34;&gt;contact&lt;/a&gt; me for more details!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Can React Native compare and compete with true native code?</title>
      <link>https://ryanmhoffman.github.io/blog/2018/01/28/react-native/</link>
      <pubDate>Sun, 28 Jan 2018 13:47:08 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2018/01/28/react-native/</guid>
      <description>

&lt;h1 id=&#34;why-write-this-article&#34;&gt;Why Write this Article?&lt;/h1&gt;

&lt;p&gt;Great question, I&amp;rsquo;m glad you asked! First, let me say that this is &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; going to be a
benchmarking article to compare numbers and load times or anything like that. This article
is going to be a look into whether a developer who currently works using native code for
either or both mobile platforms should consider React Native. I am writing this article
because that is the position I find myself in currently. I am a native Android developer;
I love Kotlin and Java and I am very comfortable developing Android apps. I have some
experience with iOS, but I find it much less enjoyable, and I am not nearly as comfortable
with Swift as I am with Kotlin and Java.&lt;/p&gt;

&lt;p&gt;So why would I look at React Native when I&amp;rsquo;m already a native developer? In reality, I&amp;rsquo;ve
been looking for a way to be able to write an application that can share a majority of its
code on multiple platforms. I was hopeful that Kotlin could fill that requirement, and it
looks like this is still promising with transpiling to JavaScript and to native code that
can be run with c code, but it is not near ready yet and also still very complicated. So&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;enter-react-native&#34;&gt;Enter React Native&lt;/h3&gt;

&lt;p&gt;If you don&amp;rsquo;t know what React Native is, it&amp;rsquo;s a framework developed by Facebook that allows
you to build native apps for both Android and iOS using JavaScript. Yes, it is cross
platform, and yes, it really is native code. I won&amp;rsquo;t go into the details of how it works,
but it really does make truly native apps, not hybrid or just webviews. React Native lets
you write &lt;em&gt;nearly&lt;/em&gt; all of your code in JavaScript, &lt;strong&gt;and&lt;/strong&gt; it lets you share the majority
of that code across both platforms. This is exactly what I was looking for so I decided to
give it a try.&lt;/p&gt;

&lt;h3 id=&#34;the-learning-curve&#34;&gt;The Learning Curve&lt;/h3&gt;

&lt;p&gt;There was only one small problem: I didn&amp;rsquo;t know JavaScript. Not only did I not know
JavaScript, but I thought I hated it. I had limited exposure to it in passing, but no real
experience with it. But I had heard plenty of horror stories about its quirks and
inconsistencies to know it wasn&amp;rsquo;t for me. I decided to put my preconcieved notions about
the language aside and approach both React Native and JavaScript with an open mind. And
guess what I found? I&amp;hellip;loved it! Yes, I actually enjoyed JavaScript almost immediately
after spending a couple hours truly messing around in it. It was easy to pick up, had lots
of examples and tutorials, and seemed intuitive to use to me.&lt;/p&gt;

&lt;p&gt;My main method of learning was just to start with the official React Native docs, which
are fantastic by the way, and move all the way through their documentation. I got through
that in about an hour and felt I had a decent grasp of the concept, but I needed more
practice, so I went in search of a tutorial with some basic ideas like retrieving data
from an API, parsing JSON, and making an app that could actually be useful. In less than a
day I felt I had a good enough understanding to work on a real (small) project. That is
an incredible thing to think about, considering I knew neither React Native nor JavaScript
before this.&lt;/p&gt;

&lt;h3 id=&#34;the-native-part&#34;&gt;The &lt;em&gt;Native&lt;/em&gt; Part&lt;/h3&gt;

&lt;p&gt;Once I got to this point, I learned something new that blew my mind. I understood that
React Native creates real Android Studio and Xcode projects, but it hadn&amp;rsquo;t dawned on me
that I could actualy open them and put native code in the projects there. This is
important because while React Native is very good, it does not have all of the elements of
a truly native app. Some more complex or less used components are left out (for now.) By
being able to still write Kotlin in the Android project and Swift in the Xcode project,
yet having all logic and much of the UI rendered from a single JavaScript source, I could
get the 100% native code base I was looking for with a single, shared codebase for both
mobile platforms.&lt;/p&gt;

&lt;h2 id=&#34;where-i-am-going-from-here&#34;&gt;Where I am Going From Here&lt;/h2&gt;

&lt;p&gt;I am by no means an expert in React Native or JavaScript. I have only been using it a
little over a week at the time I am writing this, but I plan to continue on this path. It
can cut down my development time dramatically by allowing me to share code across
platforms, and that could be a big selling feature to clients. It will also allow me to
create much better iOS apps which are currently my weak point, because I can use more
JavaScript and less Swift. I think in the long run this will not only help me become a
better developer, but it will provide value to my future clients by decreasing development
time and saving them money.&lt;/p&gt;

&lt;p&gt;In the future once I have spent more time with both new technologies (to me) I may provide
an update on whether my thoughts have changed at all or if I have any new opinions on the
topics. Until next time, happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nearly 8 Months with Vim</title>
      <link>https://ryanmhoffman.github.io/blog/2017/12/27/update-on-vim/</link>
      <pubDate>Wed, 27 Dec 2017 13:47:08 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2017/12/27/update-on-vim/</guid>
      <description>

&lt;h1 id=&#34;how-i-feel-about-vim-now&#34;&gt;How I Feel About Vim Now&lt;/h1&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This post is a follow up on a post I wrote several months ago about my starting point with Vim. If you missed that post, you can
read it &lt;a href=&#34;https://ryanmhoffman.github.io/blog/2017/04/28/getting-started-with-vim/&#34;&gt;here&lt;/a&gt;. That details how and when I started with Vim nearly 8 months ago.
Now it is an integral part of my workflow. It is my only text editor, and I don&amp;rsquo;t know how I lived without it before. The intention
isn&amp;rsquo;t to preach Vim here and force it on anyone; I am merely chronicling my adventures in learning this editor.&lt;/p&gt;

&lt;h2 id=&#34;how-i-use-vim&#34;&gt;How I use Vim&lt;/h2&gt;

&lt;p&gt;Vim is my general text editor now, used for pretty much everything but Java and Kotlin (Android development). I use it for
Python, editing my configs, even writing this post in Markdown. I have personalized my vimrc a little bit, but it is actually
still very small. I use a few plugins too, but again they are very few. I have found that Vim does a lot of things that many
people might not know about and try to use plugins for.&lt;/p&gt;

&lt;p&gt;Beyond jusing actual Vim in the terminal, I also have begun using plugins wherever possible to add Vim bindings to different
applications. I have added IdeaVim to Intellij Idea and Android Studio to configure as many keys as possible to behave like
Vim. It is very good, but not perfect. It definitely is good enough to recommend to about any Vim user out there. I also use
Vimium extension in Vivaldi, my browser. It is an extension for Chrome technically, but since Vivaldi is based on the
chromium open source project same as Chrome, the extensions mostly work on it. Vimium uses many of the navigation key bindings
from Vim and adds some to help with link navigation etc. It makes it possible to use the broswer mostly without a mouse.&lt;/p&gt;

&lt;h2 id=&#34;my-vim-configuration&#34;&gt;My Vim Configuration&lt;/h2&gt;

&lt;p&gt;My Vim config is pretty small, but it does have some changes, almost none are unique to me. I find things from other people&amp;rsquo;s
configs and use them, just like everyone else does. Some big changes I have made are remapping the escape key to jj. Other
than typing it right there, I have never had to type two j&amp;rsquo;s together before, so it is a safe string to use. It is on the
home row so I don&amp;rsquo;t have to stretch for escape every time I want to exit insert mode. For plugins, I have added Nerdtree
for easy file navigation, I added YouCompleteMe code completion engine, and I have added powerline. I use relative line
numbers for easy jumping from line to line. The last customizations I made are just visual, I use syntax highlighting and
the color scheme I have set is darcula, which looks like the theme of the same name in Jetbrains IDEs.&lt;/p&gt;

&lt;h2 id=&#34;where-i-m-going-from-here&#34;&gt;Where I&amp;rsquo;m Going From Here&lt;/h2&gt;

&lt;p&gt;Vim is my main editor now, and I can&amp;rsquo;t see myself switching any time soon. That doesn&amp;rsquo;t mean I will never try something else,
but I have become so much more productive with Vim that it feels like a waste to use anything else now. I don&amp;rsquo;t want to be
a vim evangelist, preaching it to all. It simply is the best editor for me and my workflow. That does not mean it is for
everyone, nor should it be. I might make tutorials some day about Vim, but for now, I am just a happy user.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Vim</title>
      <link>https://ryanmhoffman.github.io/blog/2017/04/28/getting-started-with-vim/</link>
      <pubDate>Fri, 28 Apr 2017 13:47:08 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2017/04/28/getting-started-with-vim/</guid>
      <description>

&lt;h1 id=&#34;getting-started-with-vim&#34;&gt;Getting Started with Vim&lt;/h1&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The title of this article might be misleading a little bit, but this is not a tutorial about how to get started with Vim.
It is in fact a small post about my decision to get started with Vim. I recently made the decision to start using Vim as
my main (read only) editor. I decided that I&amp;rsquo;m going to give it a try for 37 days, and after that I will see if I like it
and if it makes me any more productive than with my current editor.&lt;/p&gt;

&lt;h2 id=&#34;starting-point&#34;&gt;Starting Point&lt;/h2&gt;

&lt;p&gt;Other than a minimal knowledge of what Vim was, I knew nothing about using it or how to get started. I installed it on all
my machines about 3 days ago, and now I&amp;rsquo;m already using it full time. I&amp;rsquo;m still very slow, I have to look up commands about
every other minute, and I constantly stop to tweak my .vimrc but I&amp;rsquo;m learning quickly.&lt;/p&gt;

&lt;p&gt;I decided to start with a blank slate. I used a pure vanilla install of Vim, and I created a blank .vimrc as a starting point.
I wanted to follow the advice that said you shouldn&amp;rsquo;t start with someone else&amp;rsquo;s configuration, and don&amp;rsquo;t put anything in your
.vimrc that you don&amp;rsquo;t understand. It&amp;rsquo;s working for me so far, but as I mentioned I&amp;rsquo;ve only been using it for a few days now.&lt;/p&gt;

&lt;h2 id=&#34;basic-commands&#34;&gt;Basic Commands&lt;/h2&gt;

&lt;p&gt;I got the basics down for navigation through the file, and basic editing with delete, copy/paste and insert. I&amp;rsquo;m trying my
best stay in normal mode as much as possible and only switch to insert mode when necessary. It&amp;rsquo;s slower for me right now, but
I can already see how it will get faster once I get the commands into my fingers.&lt;/p&gt;

&lt;h2 id=&#34;where-i-m-going-from-here&#34;&gt;Where I&amp;rsquo;m Going From Here&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m going to continue to only use Vim for the next 30 days. At the end of May, I&amp;rsquo;m going to post an update on whether I plan
to stick with Vim, and either way I&amp;rsquo;m going to give my complete and honest thoughts on using it. I will explain how it made me
more or less productive and if it was worth learning all the commands and keyboard shortcuts.&lt;/p&gt;

&lt;p&gt;I should also mention that I have installed IdeaVim plugin for Intellij IDEA and Android Studio. I do the majority of my
development in Android Studio since I&amp;rsquo;m an Android developer, so I figured to really double down and get the full experience
I need Vim everywhere. Stay tuned for the update next month and happy Vimming!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Terminology Overview</title>
      <link>https://ryanmhoffman.github.io/blog/2017/03/01/android-terminology/</link>
      <pubDate>Wed, 01 Mar 2017 13:47:08 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2017/03/01/android-terminology/</guid>
      <description>

&lt;h1 id=&#34;android-unit-of-measure-terminology&#34;&gt;Android Unit of Measure Terminology&lt;/h1&gt;

&lt;p&gt;Have you ever wondered why there are so many different units of measurement in the Android architecture? There is dp, dip, sp, px, pt, in and mm. Below I will run through what each one is and what their purpose is within the Android framework.&lt;/p&gt;

&lt;h3 id=&#34;px&#34;&gt;PX&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;View
  android:layout_width:&amp;quot;50px&amp;quot;
  android:layout_height:&amp;quot;wrap_content&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Android, px is short for pixels. It corresponds to actual pixels on the screen. In this example the view would be exactly 50 pixels wide. This is useful for getting your layout pixel perfect, but there is a catch when using px. The pixel density on the screen will vary across devices. The higher the pixel density is, the smaller the view will appear, even though it will still be 50px.&lt;/p&gt;

&lt;h3 id=&#34;dp-dip&#34;&gt;DP/DIP&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;View
  android:layout_width:&amp;quot;50dp&amp;quot;
  android:layout_height:&amp;quot;50dip&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DP and DIP are actually the same thing and can be used interchangeably. They stand for Density Independent Pixels. This is one of the most useful measurements for designing across multiple screen densities and having everything lay out properly. Density independent pixels scale views so they lay out proportionally across various pixel densities. On a screen with a pixel density of 160dpi, 1dp is the same as 1px. As the pixel density increases for  higher resolution display, the ratio of dp to px will change. If you use dp/dip as the unit of measure, Android will decide the correct ratio for you so the views stay proportional across screens with various pixel densities. This is probably the most common unit used due to how easy it is to design across devices with minimal issues. It is worth noting that while dp and dip can be used interchangeably, dp is more commonly used because not only is it one less character to type, but it also corresponds with sp as you will see next.&lt;/p&gt;

&lt;h3 id=&#34;sp&#34;&gt;SP&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;TextView
  android:textSize=&amp;quot;18sp&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SP stands for Scale Independent Pixels. SP is very similar to DP/DIP, with one main difference. Scale independent pixels adjust based on pixel density and user preference. This means if the user is visually impaired and specifies Large Text in their settings, sp will scale appropriately on their device. It is mainly used on text, but it can also be used on views containing text to ensure they expand to fit the text properly. If there are no custom settings specified on the user&amp;rsquo;s device, sp will behave exactly the same as dp/dip.&lt;/p&gt;

&lt;h3 id=&#34;pt&#34;&gt;PT&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;View
  android:layout_width:&amp;quot;25pt&amp;quot;
  android:layout_height:&amp;quot;35pt&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PT is short for Point, and it is simply &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;72&lt;/sub&gt; of an inch. This assumes a screen with 72dpi (dots per inch.)&lt;/p&gt;

&lt;h3 id=&#34;mm-and-in&#34;&gt;MM and IN&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;View
  android:layout_width:&amp;quot;1in&amp;quot;
  android:layout_height:&amp;quot;15mm&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MM is the abbreviation for millimeters, and IN is the abbreviation for inches. These units refer to actual sizes and ignore factors like pixel density and screen size. Using a value like &amp;ldquo;1in&amp;rdquo; means the view will take up exactly 1 inch of screen real estate, and the same is true for millimeters.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;When designing layouts on Android, dp and sp are definitely the most commonly used units due to how easily they scale across different screens. It is always recommended that you test your layouts on as many different screen sizes as possible to ensure that everything is laid out as expected. Even with the units that scale across pixel densities there can still be inconsistencies, so never trust that your layout will look exactly like it does in the preview in Android Studio.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Friends Android App</title>
      <link>https://ryanmhoffman.github.io/blog/2016/12/20/friends-android-app/</link>
      <pubDate>Tue, 20 Dec 2016 13:47:08 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2016/12/20/friends-android-app/</guid>
      <description>

&lt;h1 id=&#34;friends-android-app&#34;&gt;Friends Android App&lt;/h1&gt;

&lt;p&gt;Friends is an Android app I am currently developing with a planned release in early January 2017. The app
is a short-list version of the stock contacts app. Friends pulls in only your starred contacts and gives
you easy access to call or text them. It is supposed to be sort of like a speed dial, but for all your
favorites instead of just one, and all in one place.&lt;/p&gt;

&lt;h2 id=&#34;the-idea&#34;&gt;The Idea&lt;/h2&gt;

&lt;p&gt;I originally began building this app as a generic replacement to the stock contacts app on Android. As I
was building it I began wondering what feature I would have that would set it apart. I thought about the
idea of somehow highlighting friends and those you talk to most to make it easiest to contact them.&lt;/p&gt;

&lt;p&gt;That is when I decided to dedicate the app to &lt;strong&gt;&lt;em&gt;only&lt;/em&gt;&lt;/strong&gt; those favorites that you contact the most.
Instead of having the whole muddled mess of contacts, probably over half of them you used exactly one
time and will never use again, Friends puts the people most important to you at your fingertips instantly.&lt;/p&gt;

&lt;h2 id=&#34;the-features&#34;&gt;The Features&lt;/h2&gt;

&lt;p&gt;From the beginning I wanted to keep the app small and simple. I didn&amp;rsquo;t want anything slow and clunky with
a million unnecessary features that just ruin the user experience. I wanted the list of contacts as the
main screen, and when you click on one it will bring up their details and allow you to contact them.&lt;/p&gt;

&lt;p&gt;The main feature is that it collects all your favorite contacts and puts them in a very simple list on
the main screen. It isn&amp;rsquo;t cluttered or messy, and it is very easy to glance through to find the person
you are looking for in a couple seconds.&lt;/p&gt;

&lt;p&gt;Once you find the person you are looking for you can click on them to open up the details screen. This
screen has their name, of course, in a very simple material designed way. It will also have a card
containing the last text message you received from them as a reminder to what you were last talking about.&lt;/p&gt;

&lt;p&gt;The last thing you can do on the details screen is either call or text your friend. There is a Floating
Action Button on the screen, and when you click on it, it will expand showing a couple of options. You
can click the option on the left to call this person, or the option on the left to open your default
messaging app and text them.&lt;/p&gt;

&lt;p&gt;Currently that is all you can do, but there are plans to add new features in the future, as long as it
doesn&amp;rsquo;t complicate the feel. Something I&amp;rsquo;m already planning to implement is a long press to call from
the main contact list screen. Things like that are neat and useful tricks that don&amp;rsquo;t have any effect on
UI or performance but still positively improve the utility.&lt;/p&gt;

&lt;h2 id=&#34;release-schedule&#34;&gt;Release Schedule&lt;/h2&gt;

&lt;p&gt;As I mentioned previously, I plan to have the first version of this released within the first week or
two of January. As with all software, it is never finished, but it is very nearly ready to be released
in the initial version. All of the features for the first version are already implemented and seem to
be working, but I might need to make a few tweaks here or there and I&amp;rsquo;m still heavily testing to make
sure it goes well on release.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll update this post frequently with news on the release schedule and probably continue to update it
after it is released to announce improvements and future features.&lt;/p&gt;

&lt;h2 id=&#34;update&#34;&gt;&lt;em&gt;Update&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Friends has officially been published to the Play Store. Of course it is a bare bones version, but there
will be more updates down the line. I did end up adding the long press to call from the main screen since
that was a very quick edit to the code. I also added a sorting function to put your friends in
alphabetical order. That was relatively simple to implement and makes it much easier to scroll and find
the person you are looking for. If you want to check it out please download it from the Play Store and
leave me a review letting me know what you think!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;https://play.google.com/store/apps/details?id=com.software.rmh.friends&#39;&gt;&lt;img src=&#39;https://ryanmhoffman.github.io/img/google-play-badge.png&#39;/&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>