<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ryan M. Hoffman</title>
    <link>https://ryanmhoffman.github.io/tags/terminology/index.xml</link>
    <description>Recent content on Ryan M. Hoffman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2016 - 2017 RMH Companies; all rights reserved.</copyright>
    <atom:link href="https://ryanmhoffman.github.io/tags/terminology/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Android Terminology Overview</title>
      <link>https://ryanmhoffman.github.io/blog/2017/03/01/android-terminology/</link>
      <pubDate>Wed, 01 Mar 2017 13:47:08 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2017/03/01/android-terminology/</guid>
      <description>

&lt;h1 id=&#34;android-unit-of-measure-terminology&#34;&gt;Android Unit of Measure Terminology&lt;/h1&gt;

&lt;p&gt;Have you ever wondered why there are so many different units of measurement in the Android architecture? There is dp, dip, sp, px, pt, in and mm. Below I will run through what each one is and what their purpose is within the Android framework.&lt;/p&gt;

&lt;h3 id=&#34;px&#34;&gt;PX&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;View
  android:layout_width:&amp;quot;50px&amp;quot;
  android:layout_height:&amp;quot;wrap_content&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Android, px is short for pixels. It corresponds to actual pixels on the screen. In this example the view would be exactly 50 pixels wide. This is useful for getting your layout pixel perfect, but there is a catch when using px. The pixel density on the screen will vary across devices. The higher the pixel density is, the smaller the view will appear, even though it will still be 50px.&lt;/p&gt;

&lt;h3 id=&#34;dp-dip&#34;&gt;DP/DIP&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;View
  android:layout_width:&amp;quot;50dp&amp;quot;
  android:layout_height:&amp;quot;50dip&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DP and DIP are actually the same thing and can be used interchangeably. They stand for Density Independent Pixels. This is one of the most useful measurements for designing across multiple screen densities and having everything lay out properly. Density independent pixels scale views so they lay out proportionally across various pixel densities. On a screen with a pixel density of 160dpi, 1dp is the same as 1px. As the pixel density increases for  higher resolution display, the ratio of dp to px will change. If you use dp/dip as the unit of measure, Android will decide the correct ratio for you so the views stay proportional across screens with various pixel densities. This is probably the most common unit used due to how easy it is to design across devices with minimal issues. It is worth noting that while dp and dip can be used interchangeably, dp is more commonly used because not only is it one less character to type, but it also corresponds with sp as you will see next.&lt;/p&gt;

&lt;h3 id=&#34;sp&#34;&gt;SP&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;TextView
  android:textSize=&amp;quot;18sp&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SP stands for Scale Independent Pixels. SP is very similar to DP/DIP, with one main difference. Scale independent pixels adjust based on pixel density and user preference. This means if the user is visually impaired and specifies Large Text in their settings, sp will scale appropriately on their device. It is mainly used on text, but it can also be used on views containing text to ensure they expand to fit the text properly. If there are no custom settings specified on the user&amp;rsquo;s device, sp will behave exactly the same as dp/dip.&lt;/p&gt;

&lt;h3 id=&#34;pt&#34;&gt;PT&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;View
  android:layout_width:&amp;quot;25pt&amp;quot;
  android:layout_height:&amp;quot;35pt&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PT is short for Point, and it is simply &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;72&lt;/sub&gt; of an inch. This assumes a screen with 72dpi (dots per inch.)&lt;/p&gt;

&lt;h3 id=&#34;mm-and-in&#34;&gt;MM and IN&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;View
  android:layout_width:&amp;quot;1in&amp;quot;
  android:layout_height:&amp;quot;15mm&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MM is the abbreviation for millimeters, and IN is the abbreviation for inches. These units refer to actual sizes and ignore factors like pixel density and screen size. Using a value like &amp;ldquo;1in&amp;rdquo; means the view will take up exactly 1 inch of screen real estate, and the same is true for millimeters.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;When designing layouts on Android, dp and sp are definitely the most commonly used units due to how easily they scale across different screens. It is always recommended that you test your layouts on as many different screen sizes as possible to ensure that everything is laid out as expected. Even with the units that scale across pixel densities there can still be inconsistencies, so never trust that your layout will look exactly like it does in the preview in Android Studio.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>