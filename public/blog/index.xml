<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog-rsses on Ryan M. Hoffman</title>
    <link>https://ryanmhoffman.github.io/blog/index.xml</link>
    <description>Recent content in Blog-rsses on Ryan M. Hoffman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2016 RMH Companies; all rights reserved.</copyright>
    <lastBuildDate>Thu, 01 Dec 2016 13:47:08 +0200</lastBuildDate>
    <atom:link href="https://ryanmhoffman.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Android Studio Libraries With Gradle</title>
      <link>https://ryanmhoffman.github.io/blog/2016/12/01/android-studio-libraries-with-gradle/</link>
      <pubDate>Thu, 01 Dec 2016 13:47:08 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2016/12/01/android-studio-libraries-with-gradle/</guid>
      <description>

&lt;h1 id=&#34;using-libraries-in-android-studio&#34;&gt;Using Libraries in Android Studio&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://ryanmhoffman.github.io/img/banners/banner_gradle_android.png&#34; style=&#34;width: 100%; height: 100%&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;intro-to-gradle-for-android-studio&#34;&gt;Intro to Gradle for Android Studio&lt;/h2&gt;

&lt;p&gt;Android Studio switched to a gradle based build system a few years ago, and that made it very simple to
incorporate open source libraries  your Android projects. If you aren&amp;rsquo;t familiar with gradle you can
learn more about it &lt;a href=&#34;https://gradle.org/getting-started-android-build/&#34;&gt;here&lt;/a&gt;. The details of gradle
recipes are beyond the scope of this post, but I will show the very basics of including libraries in
your project. Fortunately gradle makes it dummy-proof to add dependencies in your project. Gradle is not
the only way to add a library to your project, and if you are familiar with eclipse then you are most
likely familiar with adding .jar files to your project. This is still possible in Android Studio, but I
will not be covering that in this post, and I don&amp;rsquo;t recommend it. By using gradle, all you need to do is
include 1 line of code in you &lt;code&gt;build.gradle&lt;/code&gt; file and it does the rest. It pulls in the dependency at
build time so it doesn&amp;rsquo;t need to be downloaded and included as a .jar file. Even more appealing than that
is how easy it is to use it with different versions of libraries. With gradle, if you are using
&lt;code&gt;my-awesome-library:v1.0&lt;/code&gt; but then version 2-0 comes out, all you have to do is change that statement
to &lt;code&gt;my-awesome-library:v2.0&lt;/code&gt; and start using the updates immediately. That is much easier than
deleting the .jar and downloading and adding the new version.&lt;/p&gt;

&lt;p&gt;So now that we know the differences let&amp;rsquo;s have a look at adding external libraries with gradle.&lt;/p&gt;

&lt;h2 id=&#34;adding-libraries-with-gradle&#34;&gt;Adding Libraries with Gradle&lt;/h2&gt;

&lt;p&gt;When you create a new project in Android Studio it is already preconfigured to use gradle. If you look
through the project files that are created initially you will find a couple different gradle files. The
first one is probably your high level project file. This is the gradle file to configure project-wide
settings. We will not need to modify this file for what we are going to accomplish in this tutorial. Next
will be the module level gradle files. If you created a simple app with only one module then there will
only be one module level &lt;code&gt;build.gradle&lt;/code&gt;. If you included other modules in your project, for example
Android Wear, Android TV, or Android Auto then there should be more than one version of this file for
each module. Each one should be labeled next to it in parentheses describing what it is for.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;build.gradle (Project: MyProject)
build.gradle (Module: mobile)
build.gradle (Module: wear)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The one you need to edit is the &lt;code&gt;build.gradle (Module: mobile)&lt;/code&gt; to add the open source library to our
project. The library we are going to add in this example is Google&amp;rsquo;s
&lt;a href=&#34;https://developer.android.com/training/material/lists-cards.html#CardView&#34;&gt;CardView&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how easy it is to add a library to your project with gradle and Android Studio. Start by opening
the &lt;code&gt;build.gradle&lt;/code&gt; file for the mobile module. Find the section near the bottom labeled
&lt;code&gt;dependencies&lt;/code&gt; and add this line to the bottom of that section:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;compile &#39;com.android.support:cardview-v7:25.0.1&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dependencies {
  // other module dependencies may be listed here
  ...
  compile &#39;com.android.support:cardview-v7:25.0.1&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you add that line Android Studio will let you know that gradle files have changed and prompt you to
sync your project with gradle. Once you do that you can immediately begin using the library in your code.
If a new version is released just change the version number in your gradle file and sync your project
again and that&amp;rsquo;s it.&lt;/p&gt;

&lt;h2 id=&#34;adding-modules&#34;&gt;Adding Modules&lt;/h2&gt;

&lt;p&gt;I have already mentioned modules above a little bit, but I haven&amp;rsquo;t really explained what they are or what
they are used for. Modules are basically just portions of code that are broken out into groups to make
them easily reusable. You can think of them as mini projects within your main project. As I mentioned
earlier, when you create an app for mobile, wear, auto, and tv, Android Studio automatically sets up each
as its own module. This is so you can define activities and views for each in their own module without it
affecting any of the others. But you can also create your own modules. I like to create a module for all
of the logic and data classes in my apps, that way the code can be shared to each portion of the app.&lt;/p&gt;

&lt;p&gt;For instance, if I have an app that has a phone portion and a wear portion, most likely it will pull data
from a server and both portions will need to use that data. Rather than retrieve that data and use it in
the phone module, then retrieve and use it in the wear module, I build a separate data module to retrieve
the data from the server and both the phone and wear modules can use it as necessary from there. Pretty
much any logic, data loading/storage can be put in modules this way to save writing it all multiple
times.&lt;/p&gt;

&lt;p&gt;Adding a module is quite simple and very similar to adding an external library. In your project there
should be a &lt;code&gt;settings.gradle&lt;/code&gt; file. This file manages what modules are included in your project. It
should look something like this for the most basic project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include &#39;:app&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add your module you have to add this, replacing &amp;ldquo;myshinynewmodule&amp;rdquo; with the name of your module or
library.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include &#39;:app&#39;, &#39;:myshinynewmodule&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this you are almost done. There is one final step before you can use the code in your shiny new
module in your app. As we did with the cardview library earlier, open the &lt;code&gt;build.gradle&lt;/code&gt; file for
your mobile module. In the dependencies section that we modified earlier add this line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;compile project (&#39;:myshinynewmodule&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it. You can now start using the code from your module in your app just as if it were an external
library.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this was clear and you were able to learn something about gradle, dependencies, or using modules
in your Android project. If you have any questions please reach out to me and I&amp;rsquo;d be happy to help. If
you spot any errors, please let me know about them so I can make this as accurate as possible.
(BE GENTLE!!) As always, please follow me on twitter
&lt;a href=&#34;https://www.twitter.com/hoffmanryan1&#34;&gt;@hoffmanryan1&lt;/a&gt; and on medium
&lt;a href=&#34;https://www.medium.com/@rmhcompanies&#34;&gt;@rmhcompaines&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Studio Keyboard Shortcuts</title>
      <link>https://ryanmhoffman.github.io/blog/2016/11/21/android-studio-shortcuts/</link>
      <pubDate>Mon, 21 Nov 2016 13:47:08 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2016/11/21/android-studio-shortcuts/</guid>
      <description>

&lt;h2 id=&#34;android-studio-shortcuts&#34;&gt;Android Studio Shortcuts&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://ryanmhoffman.github.io/img/banners/android-studio.png&#34; style=&#34;width: 100%; height: 100%&#34;/&gt;&lt;/p&gt;

&lt;p&gt;If you have used Android Studio for even a short time I&amp;rsquo;m sure you have found some shortcuts and hot keys
to speed up your coding and keep your hands on the keyboard where they belong! I&amp;rsquo;m going to run through
some of the shortcuts I find most useful. Android Studio is built by Google, but it is based on Jetbrains
Intellij Community Edition Java IDE. This means that all of the Intellij shortcut keys work on Android
Studio, but Google have added a few of their own. Let&amp;rsquo;s jump into some of the best ones.&lt;/p&gt;

&lt;h3 id=&#34;searching-for-a-shortcut&#34;&gt;Searching For A Shortcut&lt;/h3&gt;

&lt;p&gt;Stop me if this has happened to you before. You read an awesome tutorial on shortcuts and hot keys in
Android Studio and found a few that looked really useful, but when you sit down and start coding you
can&amp;rsquo;t remember what they were. Fortunately someone thought of this and made several several search
functions.&lt;/p&gt;

&lt;h4 id=&#34;search-everywhere&#34;&gt;Search everywhere:&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Shift Shift&lt;/strong&gt; (Windows, Linux, Mac)
This searches literally everywhere. It can even search outside of the scope of your project if you want
it to (every file on your computer). Thankfully it groups what it finds into categories, with the most
recent files first.&lt;/p&gt;

&lt;h4 id=&#34;search-for-commands&#34;&gt;Search for commands:&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Command + Shift + A&lt;/strong&gt; (Mac)
&lt;strong&gt;Control + Shift + A&lt;/strong&gt; (Windows, Linux)
This searches for any command. If you know there is a way to jump to the next error in your code but you
can&amp;rsquo;t remember what it is, just use this command and start typing &amp;ldquo;error&amp;rdquo; and it will intelligently find
it. This works for any command. If you only want to memorize one shortcut, this is the one.&lt;/p&gt;

&lt;h3 id=&#34;navigation&#34;&gt;Navigation&lt;/h3&gt;

&lt;p&gt;Here are a few more ways to keep your hands off the mouse and still get around your project quickly.&lt;/p&gt;

&lt;h4 id=&#34;jump-to-class&#34;&gt;Jump to Class&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Command + O&lt;/strong&gt; (Mac)
&lt;strong&gt;Control + N&lt;/strong&gt; (Windows, Linux)&lt;/p&gt;

&lt;h4 id=&#34;jump-to-file&#34;&gt;Jump to File&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Command + Shift + O&lt;/strong&gt; (Mac)
&lt;strong&gt;Control + Shift + N&lt;/strong&gt; (Windows, Linux)&lt;/p&gt;

&lt;h4 id=&#34;jump-to-method&#34;&gt;Jump to Method&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Control + Up/Down&lt;/strong&gt; (Mac)
&lt;strong&gt;Alt + Up/Down&lt;/strong&gt; (Windows, Linux)
Up is the previous method, down is the next method.&lt;/p&gt;

&lt;h3 id=&#34;editing-code&#34;&gt;Editing Code&lt;/h3&gt;

&lt;p&gt;This is the one we try to spend the most time on, and even though searching for the correct command is
easy with the shortcut above, it is still quicker to memorize these shortcuts and add them to our
workflow. These will really help you get &lt;em&gt;past&lt;/em&gt; the editor and focus only on the editing.&lt;/p&gt;

&lt;h4 id=&#34;auto-completion&#34;&gt;Auto-Completion&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Tab&lt;/strong&gt; (Mac, Windows, Linux)
&lt;strong&gt;Enter&lt;/strong&gt; (Mac, Windows, Linux)&lt;/p&gt;

&lt;h4 id=&#34;comments&#34;&gt;Comments&lt;/h4&gt;

&lt;p&gt;Single Line Comment
&lt;strong&gt;Command + /&lt;/strong&gt; (Mac)
&lt;strong&gt;Control + /&lt;/strong&gt; (Windows, Linux)
Multi Line Comment
&lt;strong&gt;Command + Alt + /&lt;/strong&gt; (Mac)
&lt;strong&gt;Control + Shift + /&lt;/strong&gt; (Windows, Linux)&lt;/p&gt;

&lt;h4 id=&#34;show-parameters&#34;&gt;Show Parameters&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Command + p&lt;/strong&gt; (Mac)
&lt;strong&gt;Control + p&lt;/strong&gt; (Windows, Linux)
This one is useful if you can&amp;rsquo;t remember what parameters a method takes.&lt;/p&gt;

&lt;h4 id=&#34;refactoring&#34;&gt;Refactoring&lt;/h4&gt;

&lt;p&gt;Renaming a variable/method/class etc.
&lt;strong&gt;Shift + F6&lt;/strong&gt; (Mac)
&lt;strong&gt;Control + F6&lt;/strong&gt; (Windows, Linux)&lt;/p&gt;

&lt;h4 id=&#34;intelligent-code-generation&#34;&gt;Intelligent Code Generation&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Command + N&lt;/strong&gt; (Mac)
&lt;strong&gt;Alt + Insert&lt;/strong&gt; (Windows, Linux)&lt;/p&gt;

&lt;h4 id=&#34;live-templates&#34;&gt;Live Templates&lt;/h4&gt;

&lt;p&gt;There are dozens of these available by default, and the great thing about Android Studio is that you
have the freedom to create more if you wish. If you don&amp;rsquo;t know what live templates are, they are
boilerplate sections of code that gets automatically inserted for you. All you have to do is tab through
to fill in the variable values.&lt;/p&gt;

&lt;p&gt;A commonly used one is &amp;ldquo;Toast&amp;rdquo;. You type &amp;ldquo;Toast&amp;rdquo; and hit &lt;strong&gt;Tab&lt;/strong&gt; and it automatically gives you this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Toast.makeText(MainActivity.this, &amp;quot;&amp;quot;, Toast.LENGTH_SHORT).show();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you hit &lt;strong&gt;Tab&lt;/strong&gt; a second time it moves the cursor over to the quotation marks so you can type your
message, and if you hit &lt;strong&gt;Tab&lt;/strong&gt; one more time it moves your cursor to the end of the line.&lt;/p&gt;

&lt;p&gt;Another common one is to type &amp;ldquo;fori&amp;rdquo; and hit &lt;strong&gt;Tab&lt;/strong&gt;. That gives you this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for(i = 0; i &amp;lt; ; i++){

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course tabbing through allows you to modify the variable name, value, loop length, and finally it
drops you inside the curly brackets to write the code to be executed.&lt;/p&gt;

&lt;p&gt;As I mentioned there are dozens more and you can create your own. To find all the live templates
included just search everywhere with &lt;strong&gt;Shift Shift&lt;/strong&gt; and type &amp;ldquo;Live Templates&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Thank you for reading this. I hope some of these tricks will help you become a better and faster
developer. If you want the full and overwhelming list of shortcuts for Android Studio you can check out
the list &lt;a href=&#34;https://developer.android.com/studio/intro/keyboard-shortcuts.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, please follow me on twitter &lt;a href=&#34;https://www.twitter.com/hoffmanryan1&#34;&gt;@hoffmanryan1&lt;/a&gt; and on
medium &lt;a href=&#34;https://www.medium.com/@rmhcompanies&#34;&gt;@rmhcompaines&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Constraint Layout</title>
      <link>https://ryanmhoffman.github.io/blog/2016/11/15/constraint-layout/</link>
      <pubDate>Tue, 15 Nov 2016 13:47:08 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2016/11/15/constraint-layout/</guid>
      <description>

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;There are many different views and view groups in the Android infrastructure. Some are more useful than
others, but they all have their place. Recently, Google released a new layout called ConstraintLayout.&lt;/p&gt;

&lt;p&gt;This is still in alpha release stage but it looks very promising. This isn&amp;rsquo;t going to be a tutorial on how
to use it, rather, it&amp;rsquo;s just my thoughts and opinions on the concept and implementation. Keep in mind I
have only been messing around with it for a couple of weeks, so my opinion could change as they update and
improve it.&lt;/p&gt;

&lt;h3 id=&#34;initial-thoughts&#34;&gt;Initial Thoughts&lt;/h3&gt;

&lt;p&gt;When I first heard about ConstraintLayout before I even tried it out I thought it sounded like a rip off
of iOS UI builder in xcode. After learning more about it and using it a little bit I still kind of feel
that way. That&amp;rsquo;s not to say it&amp;rsquo;s a bad thing, but even if it wasn&amp;rsquo;t copied directly from Apple it was at
least &lt;em&gt;heavily&lt;/em&gt; inspired by xcode. My initial reaction to this was to not like it. At all. I can stumble
my way through iOS development, but I&amp;rsquo;m not nearly as comfortable with iOS as I am with Android. And my
limited experience with the UI Builder in xcode is not good. I found it a little bit difficult to use and
setting constraints was hard to come to grips with coming from XML layouts in Android. Then Android was
switching to ConstraintLayout to mimic iOS? Not a big fan of that idea.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t know what ConstraintLayout is, you can get more details about it
&lt;a href=&#34;https://developer.android.com/training/constraint-layout/index.html&#34;&gt;here&lt;/a&gt;. Basically you drag views and
widgets onto the design screen and then set &amp;ldquo;constraints&amp;rdquo; that tell where each view should be positioned
relative to everything else on the screen. The purpose of it is to flatten the hierarchy of the view tree.
Instead of nesting LinearLayout&amp;rsquo;s and RelativeLayout&amp;rsquo;s trying to position everything properly, this allows
you to position everything relative to whatever you need to in order to lay it all out properly. It is
supposed to help improve performance and make it scale across different screen sizes easier. I have not
tested performance or scalability so I don&amp;rsquo;t know if it is actually better in those regards. If you run
any tests please let me know the results, I&amp;rsquo;ll add them here and credit you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ryanmhoffman.github.io/img/banners/layout-editor.png&#34; style=&#34;width: 100%; height: 100%&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;after-using-it-to-design-screens&#34;&gt;After Using it to Design Screens&lt;/h2&gt;

&lt;p&gt;I decided to give it the benefit of the doubt and it appeared to be the future of Android development so I
figured I needed to get on board. Using it was definitely weird at first, but after a while of making
different layouts I started to get used to it a little bit. Sometimes it was a little buggy, but that&amp;rsquo;s to
be expected from an alpha version.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s going to take some getting used to, but it looks promising. There are a few things I liked, and of
course plenty that I didn&amp;rsquo;t.&lt;/p&gt;

&lt;h3 id=&#34;the-good&#34;&gt;The Good&lt;/h3&gt;

&lt;p&gt;Overall the experience is good. Setting constraints is as easy as click and drag, and it is pretty
intelligent on knowing what you are trying to do. Linking views together is pretty simple, and pinning a
view to an edge or margin is also straightforward.&lt;/p&gt;

&lt;p&gt;I also like that as you make changes in the editor you can still switch over to the XML and see what is
actually changing, and if you really want you could make changes directly to the XML.&lt;/p&gt;

&lt;h3 id=&#34;the-not-so-good&#34;&gt;The Not So Good&lt;/h3&gt;

&lt;p&gt;When editing the screens there are 2 screens shown, one is the blueprint screen and one is the design
screen. The blueprint screen is meant for editing and adding constraints, while the design screen is meant
as a actual preview of what is on the screen, content and all. My problem is that you can edit constraints
(or anything really) on the design screen. It causes some bugs and issues with the layout preview, and
it&amp;rsquo;s just overall confusing. I wish they only allowed editing in the blueprint mode and the preview was
exactly that, just a preview. Perhaps in a future release they will make that change.&lt;/p&gt;

&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;It is still going to take some getting used to, but I see this as the future of Android design and
development and I really am excited about what Google is going to add down the road. I&amp;rsquo;m going to
continue to use it and learn more about it and perhaps start actually using it in projects here soon. At
it&amp;rsquo;s current stage I don&amp;rsquo;t think it is production ready, but that could change with a new release. I&amp;rsquo;ll
keep this updated as new versions come out and I learn more about it. If I get more comfortable with it I
may even write a tutorial.&lt;/p&gt;

&lt;p&gt;As always, please follow me on twitter &lt;a href=&#34;https://www.twitter.com/hoffmanryan1&#34;&gt;@hoffmanryan1&lt;/a&gt; and on medium
&lt;a href=&#34;https://www.medium.com/@rmhcompanies&#34;&gt;@rmhcompaines&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mobile Friendly Websites</title>
      <link>https://ryanmhoffman.github.io/blog/2016/11/03/mobile-friendly-websites/</link>
      <pubDate>Thu, 03 Nov 2016 21:49:20 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2016/11/03/mobile-friendly-websites/</guid>
      <description>

&lt;h2 id=&#34;why-should-i-make-my-website-mobile-friendly&#34;&gt;Why Should I Make My Website Mobile Friendly?&lt;/h2&gt;

&lt;p&gt;Practically everyone is on a mobile phone now. As of 2016 there are &lt;a href=&#34;https://www.statista.com/statistics/330695/number-of-smartphone-users-worldwide/&#34;&gt;2.1 billion smartphone users&lt;/a&gt;.
Even more impressive is more than &lt;a href=&#34;https://www.thinkwithgoogle.com/research-studies/creating-moments-that-matter.html&#34;&gt;3 out of 4 people&lt;/a&gt; would choose to search the internet on their phone over a desktop computer even if they had easy access to a desktop computer. Why? It&amp;rsquo;s faster and easier. I have an old Moto X from 2013, the original one. It is 3 years old, and I don&amp;rsquo;t even know how it&amp;rsquo;s still alive. But it is still quicker for me to search on that old phone than to log into my desktop computer, even if I&amp;rsquo;m in the same room as my computer. I can say &amp;ldquo;OK Google&amp;rdquo; and then ask it a question and get an answer without ever pulling it out of my pocket. People are impatient. If your site takes more than a few seconds to load they will not wait. If it loads and is a full desktop site on a tiny 5 inch screen they will almost definitely leave. Who wants to zoom in to make text readable then have to slide all around the screen to try to read each sentence? Not me&amp;hellip;&lt;/p&gt;

&lt;p&gt;I said all that to say this: if you haven&amp;rsquo;t updated your website to make it mobile friendly you are most likely losing customers. Google
have created a great tool to test if your site is mobile friendly. Just go &lt;a href=&#34;https://www.google.com/webmasters/tools/mobile-friendly/&#34;&gt;here&lt;/a&gt; and enter your url.&lt;/p&gt;

&lt;p&gt;But what if it says your site is not mobile friendly?&lt;/p&gt;

&lt;h2 id=&#34;how-can-i-make-my-website-mobile-friendly&#34;&gt;How Can I Make My Website Mobile Friendly?&lt;/h2&gt;

&lt;p&gt;The good news is it is easier than ever to make a mobile website. There are dozens of frameworks available that can be used to make a
beautiful desktop site that scales perfectly onto smaller screens. One of the most popular is &lt;a href=&#34;https://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt;. If
you have the technical knowledge you can migrate an entire smaller website in just a day or two. But what if you don&amp;rsquo;t have the technical knowledge? It&amp;rsquo;s time to start thinking about hiring a web developer. I know what you&amp;rsquo;re probably thinking: that sounds Expensive. And it can be if you don&amp;rsquo;t do your homework first. But it can also be one of the best investments you can make in this mobile driven world.&lt;/p&gt;

&lt;p&gt;Freelancing is gaining more and more popularity each year, and there are some very talented people out there who freelance full time. I
began freelancing in my spare time, and I love it. You can hire a freelancer to either update or completely rebuild your website and it
will be mobile friendly from the ground up.&lt;/p&gt;

&lt;p&gt;If you think it is time to redo your website and aren&amp;rsquo;t sure where to start, please feel free to &lt;a href=&#34;https://ryanmhoffman.github.io/contact/&#34;&gt;contact&lt;/a&gt; me. I do freelance
web design and development and I would love to work with you on your next project.&lt;/p&gt;

&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;If you are looking for more resources on optimizing your site I recommend checking out &lt;a href=&#34;https://developers.google.com/webmasters/mobile-sites/&#34;&gt;Google&amp;rsquo;s page&lt;/a&gt; on this topic. They cover it very well and even have tutorials if you want to tackle it yourself.&lt;/p&gt;

&lt;p&gt;If you enjoyed this post, please check back later for more thoughts. I post new content weekly. Until then you can follow me on twitter &lt;a href=&#34;https://www.twitter.com/hoffmanryan1&#34;&gt;@hoffmanryan1&lt;/a&gt; and medium &lt;a href=&#34;https://www.medium.com/@rmhcompanies&#34;&gt;@rmhcompanies&lt;/a&gt; for other non-tech related content.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CBT Velocity Android App</title>
      <link>https://ryanmhoffman.github.io/blog/2016/11/02/velocity-android-app/</link>
      <pubDate>Wed, 02 Nov 2016 13:47:08 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2016/11/02/velocity-android-app/</guid>
      <description>

&lt;h2 id=&#34;the-idea&#34;&gt;The Idea&lt;/h2&gt;

&lt;p&gt;This app was created for high school students. Specifically, the high school students in my church, Canton
Baptist Temple, who are a part of the youth group which is called - as you might have guessed, Velocity.
The thinking behind this is pretty simple and makes a lot of sense if you have ever spent any time around
high school students. The issue is that no matter how many times you tell them something, they still have
no idea what you said - unless you put it right in front of them on their phone.&lt;/p&gt;

&lt;p&gt;The problem we had was that we would announce class activities, mail out fliers, and have sign up sheets
in the class, yet we would still have parents and students calling a couple days before hand to ask for
all the details we had already made sure were available. We decided the best way to get them this info
was on their phone in an app with notifications and reminders and all the details they need.&lt;/p&gt;

&lt;h2 id=&#34;development-and-vision&#34;&gt;Development and Vision&lt;/h2&gt;

&lt;p&gt;CBT Velocity is a native app designed for the Android platform. It is coded in Java and XML, and I host
all of the content used in the app on my LAMP (Linux Apache MySQL PHP) server. As you can tell from the
screenshots I used material design for the UI/UX and I tried to keep it simple with a card based layout.
The cards are set in a RecyclerView and each card is retrieved over the network from my server. The
navigation drawer contains links to other related social media pages, and to the settings, where you can
configure data/wifi usage and turn notifications on/off.&lt;/p&gt;

&lt;p&gt;There are a couple things not implemented yet that I plan to add eventually. The first is going to be
in-app sign up for activities. I want the students to be able to log in to the app, click on the activity
and sign up there instead of the paper sheets we have in the class. The next one piggy-backs on that, and
it is to have in app payment for the activities. Instead of remembering to bring $20 to church or to the
activity, they should be able to log in and securely pay us right from within the app.&lt;/p&gt;

&lt;p&gt;The whole app is open source, please check it out at &lt;a href=&#34;https://github.com/ernieb4768/CBTVelocity&#34;&gt;github&lt;/a&gt;
and let me know what you think!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ryanmhoffman.github.io/img/banners/cbt-velocity-activities.png&#34; style=&#34;width: 33%; height: 33%; padding: 5px&#34;/&gt; &lt;img src=&#34;https://ryanmhoffman.github.io/img/banners/cbt-velocity-about-us.png&#34; style=&#34;width: 33%; height: 33%; padding: 5px&#34;/&gt; &lt;img src=&#34;https://ryanmhoffman.github.io/img/banners/cbt-velocity-nav-drawer.png&#34; style=&#34;width: 33%; height: 33%; padding: 5px&#34;/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mobile Development: Native vs Cross-Platform</title>
      <link>https://ryanmhoffman.github.io/blog/2016/11/01/mobile-native-vs-cross-platform/</link>
      <pubDate>Tue, 01 Nov 2016 13:07:31 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2016/11/01/mobile-native-vs-cross-platform/</guid>
      <description>

&lt;h3 id=&#34;should-you-even-develop-for-mobile&#34;&gt;Should You Even Develop for Mobile?&lt;/h3&gt;

&lt;p&gt;In a word, yes. Mobile development is growing to be more and more important every single year. Every day
people spend more time on their phones, tablets and other mobile devices. As of
&lt;a href=&#34;https://www.statista.com/statistics/276623/number-of-apps-available-in-leading-app-stores/&#34;&gt;June 2016&lt;/a&gt;
there are over 2.2 million apps available in the Play Store and over 2 million in the App Store.
&lt;a href=&#34;http://www.digitaltrends.com/mobile/informate-report-social-media-smartphone-use/&#34;&gt;This article&lt;/a&gt; from
back in 2015 says that the average American spends 4.7 hours &lt;em&gt;per day&lt;/em&gt; on their phone! That&amp;rsquo;s nearly a
third of our waking hours each day! If you want some of that screen time to be dedicated to your app then
you better think very carefully about what type of app you want to deliver to your users. So what will it
be, native or cross-platform?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ryanmhoffman.github.io/img/banners/mobile-development.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;the-case-for-native-apps&#34;&gt;The Case for Native Apps&lt;/h3&gt;

&lt;p&gt;Native apps, generally speaking, offer a better experience when compared to a similarly developed
cross-platform app. This isn&amp;rsquo;t always true, and it definitely doesn&amp;rsquo;t mean that you should only choose to
launch native apps. These are a few reasons why you should consider going native.&lt;/p&gt;

&lt;p&gt;Native apps are designed to be platform specific, so they feel more comfortable for the user. This is
incredibly important because &lt;a href=&#34;http://andrewchen.co/new-data-shows-why-losing-80-of-your-mobile-users-is-normal-and-that-the-best-apps-do-much-better/?utm_content=buffere4fa2&amp;amp;utm_medium=twitter.com&amp;amp;utm_source=social&amp;amp;utm_campaign=buffer&#34;&gt;77% of users will delete your app&lt;/a&gt;
within 72 hours of downloading it. That number will only go up if the design is not familiar and
comfortable for your users. On Android, Google have created Material Design as the standard. Most of the
popular apps in the Play Store have already shifted to conform to this style, and it has become normal for
Android users. On iOS, Apple have their own design guidelines that is different from Material Design.
There are certain navigation patterns that are different and other animations and visual queues that might
mean something different on each platform. By developing a native app for each os you can bring the little
things from the design standards out and make your app easier and more enjoyable for your users.&lt;/p&gt;

&lt;p&gt;Another big bonus for native apps is the increased performance you get from them. When developing for
Android, an app written in Java will &lt;em&gt;almost&lt;/em&gt; always be faster than one developed in Javascript or some
other web language. The same goes for iOS apps written in Swift or Objective-C; they will &lt;em&gt;almost&lt;/em&gt; always
be faster than their cross-platform counterparts. This is because the APIs are developed in the native
language by Google or Apple. Usually cross-platform apps are developed using Javascript or a language
that compiles to Javascript, and the large libraries and other code can end up running much slower on
the phone or tablet than well developed native code.&lt;/p&gt;

&lt;p&gt;Certain hardware related features like gestures, multi-touch, and various other sensor related components
like GPS, accelerometer and gyroscope are simpler to access and use in native apps. Most of the time
there are very straight forward APIs or libraries that allow access to these components. These are more
advanced functionalities and might not be necessary in all apps, but it is important to keep in mind when
deciding what is right for you and your idea.&lt;/p&gt;

&lt;h3 id=&#34;the-case-for-cross-platform&#34;&gt;The Case for Cross-Platform&lt;/h3&gt;

&lt;p&gt;Cross-platform apps are easier to create and can cut down your development time significantly. The main
selling point here is that you have a single code base to maintain for all users on all operating systems.
The idea here is that you create one app, which is then optimized and packaged properly for each platform
and published in each marketplace.&lt;/p&gt;

&lt;p&gt;After reading the section about native apps and seeing all the features and speed you might be thinking
that&amp;rsquo;s the way to go, but I challenge you to think about this. You have an idea for an app, maybe you
have a website and you want to take it a step further and turn it into a full on app. You already have
the website to maintain, all the code that goes along with it, and the headaches from hosting it. Now you
decide to make apps for Android and iOS. Maybe you are a code ninja and already know Java and Swift, so
that saves you time and money because you don&amp;rsquo;t have to learn new technology or hire a freelancer to do
it for you. But you start writing the iOS app first and after a couple weeks it is ready to publish, but
you don&amp;rsquo;t want to launch it without the Android app also. So you sit down and bang out that app in a
couple more weeks. Now both are ready to go so you submit them to their respective app stores. The good
news is they look great and are blazing fast, but now every time you want to make a change to your
website you have three different apps in three different code bases to maintain and update. Then a few
of your crazy followers get the new Windows phone and are still on the mobile version of your site
because no app exists for them. What now?&lt;/p&gt;

&lt;p&gt;Now contrast this with a cross-platform app. You can use most if not all of your existing Javascript
from your website when creating the app. Once development is complete you can optimize the code for each
platform and publish to each app store. Every time you want to make a change to your website you can make
the changes to the app code also and everything will look great and up to date across all platforms. If
you have users with Windows Phone or Firefox OS or anything else you can use the same code to publish to
their app stores and have good looking apps for them too.&lt;/p&gt;

&lt;p&gt;So what&amp;rsquo;s the catch? What you gain in simplicity you will lose in functionality. There may be a trade off
in speed as well although I doubt it if you are simply converting a website into a web app. The biggest
drawback will be trying to implement new features and meet the design standards of each platform.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ryanmhoffman.github.io/img/banners/mobile-development-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;which-is-right-for-you&#34;&gt;Which Is Right For You?&lt;/h3&gt;

&lt;p&gt;This is a question that you are going to have to answer for yourself. If your idea is something small and
simple like converting your website into an app then cross-platform might be the way to go for you. Other
things like tip calculators and simple note taking apps usually have simple UI&amp;rsquo;s and are good candidates
for cross-platform apps. More complex apps that rely on sensors in the phone or things like multi-touch
are probably better off as native apps.&lt;/p&gt;

&lt;p&gt;At the end of the day you need to evaluate your business or your idea and decide which choice is right
for you. Making a list of required features is a great way to see exactly what will be involved in
development and will probably make the decision much easier for you. Remember that there is no &amp;ldquo;right&amp;rdquo;
answer and even if you start out with a simple cross-platform app you can always scale up to a native app
and update from there. Good luck and happy developing!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Making This Website</title>
      <link>https://ryanmhoffman.github.io/blog/2016/11/01/making-this-site/</link>
      <pubDate>Tue, 01 Nov 2016 03:39:46 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2016/11/01/making-this-site/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I built this website for a couple different purposes. I wanted a place to showcase my portfolio and direct
potential clients for my freelance business. I also wanted to build a blog. I decided that the two ideas
related enough to warrant being one site. I also wanted something simple that wouldn&amp;rsquo;t take weeks to
create and be a nightmare to host. I did some research and settled on using &lt;a href=&#34;https://gohugo.io/&#34;&gt;hugo&lt;/a&gt;, a
static site generator built with the &lt;a href=&#34;https://golang.org/&#34;&gt;go programming language&lt;/a&gt; by Google. I went with
a static site because I wanted something fast and easy to develop AND fast when being served. Hugo checked
both of those boxes. All in from the time I first discovered hugo to the time I deployed this site on
&lt;a href=&#34;https://pages.github.com/&#34;&gt;github pages&lt;/a&gt; was about 8 hours of work. That was spread over two evenings,
but you get my point on how easy it was to learn and use.&lt;/p&gt;

&lt;h2 id=&#34;design&#34;&gt;Design&lt;/h2&gt;

&lt;p&gt;I wanted something modern that would scale well across desktop and mobile, and again hugo had me covered.
there are tons of &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;themes&lt;/a&gt; for hugo that make design a breeze. I ended up
choosing &lt;a href=&#34;https://themes.gohugo.io/hugo-universal-theme/&#34;&gt;universial theme&lt;/a&gt;. This had everything I was
looking for and was a joy to work with and modify to suit my needs. Shout-out to &lt;a href=&#34;https://bootstrapious.com/p/universal-business-e-commerce-template&#34;&gt;Bootstrapious&lt;/a&gt;
for creating the original design and to &lt;a href=&#34;https://www.devcows.com/&#34;&gt;DevCows&lt;/a&gt; for porting it to hugo.
Fantastic job!&lt;/p&gt;

&lt;h2 id=&#34;development&#34;&gt;Development&lt;/h2&gt;

&lt;p&gt;As I mentioned earlier this took me about 8 hours total to build. I was expecting to spend a week or more
easily, as building a portfolio site and a blog is a relatively small project but by no means is it &amp;ldquo;easy.&amp;rdquo;
The blog is probably my favorite part. Publishing a new blog post is as simple as copying the markdown
file into a folder, rebuilding the site and seeing it pop up.&lt;/p&gt;

&lt;p&gt;Since it is a static site and there is no database or php/node.js etc., there aren&amp;rsquo;t any comments&amp;hellip; or
so you would think. But with &lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt; it is very easy to add comments even without
any of the server side scripts. Currently I don&amp;rsquo;t have this enabled, but it is something I might look into
in the future.&lt;/p&gt;

&lt;p&gt;Another genius feature included was in the &lt;a href=&#34;https://ryanmhoffman.github.io/contact/&#34;&gt;contact&lt;/a&gt; section. Again, no server side scripts to
handle the form, but it was all thought out. &lt;a href=&#34;https://formspree.io/&#34;&gt;Formspree.io&lt;/a&gt; is included to handle
all of the emails to make sure you get them delivered to your inbox. It is a very straightforward setup,
and the best part is it&amp;rsquo;s free! If you exceed 1000 emails in a month there is a subscription plan, but I&amp;rsquo;m
not there yet.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This has been a great experience using hugo to build my website. I&amp;rsquo;m very happy with the outcome, and I
would highly recommend checking it out. I may come back and update this after spending more time
maintaining and updating the site, but currently I&amp;rsquo;m thrilled.&lt;/p&gt;

&lt;p&gt;In the mean time, please continue to check back periodically. I add new content weekly. For even more
frequent updates follow my on twitter &lt;a href=&#34;https://www.twitter.com/hoffmanryan1&#34;&gt;@hoffmanryan1&lt;/a&gt; and you can
check out my non-tech related ramblings over at my blog on medium &lt;a href=&#34;https://www.medium.com/@rmhcompanies&#34;&gt;@rmhcompanies&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>